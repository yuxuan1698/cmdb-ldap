#!/usr/bin/env python3
# coding: utf-8

import os
import subprocess
import threading
import time
import argparse
import sys
import signal
import yaml

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, BASE_DIR)
config_file=os.path.join(BASE_DIR,'config.yaml')
if not os.path.exists(config_file):
    print('ERROR: not found config file config.yaml.')
    sys.exit(1)
cfile=open(config_file,encoding='utf-8')
loaded_config=yaml.load(cfile,Loader=yaml.FullLoader)

cfile.close()
# print(loaded_config.get('cmdb').get('daemon'))
os.environ["PYTHONIOENCODING"] = "UTF-8"
CMDB_APPS_DIR = BASE_DIR
CMDB_LOG_DIR = os.path.join(BASE_DIR, 'logs')
RUN_TMP_DIR = os.path.join(BASE_DIR, 'run')
HTTP_HOST = loaded_config.get('cmdb').get('host') or '127.0.0.1'
HTTP_PORT = loaded_config.get('cmdb').get('port') or 8000
DEBUG =  False
LOG_LEVEL = 'DEBUG'

START_TIMEOUT = 40
WORKERS = 4
DAEMON = loaded_config.get('cmdb').get('daemon') or False


EXIT_EVENT = threading.Event()
all_services = ['gunicorn', 'celery']

if not os.path.exists(CMDB_LOG_DIR):
    os.mkdir(CMDB_LOG_DIR)
if not os.path.exists(RUN_TMP_DIR):
    os.mkdir(RUN_TMP_DIR)

def check_database_connection():
    try:
        os.chdir(CMDB_APPS_DIR)
        for i in range(30):
            print("Check database connection ...")
            code = subprocess.call("python3 manage.py showmigrations authentication", shell=True)
            if code == 0:
                print("Database connect success")
                return
            time.sleep(1)
        print("Connection database failed, exist")
        sys.exit(10)
        # pass
    except Exception as e:
        print(e)
        pass


def make_migrations():
    print("Check database structure change ...")
    os.chdir(CMDB_APPS_DIR)
    print("Migrate model change to database ...")
    subprocess.call('python3 manage.py migrate', shell=True)

def prepare():
    check_database_connection()
    make_migrations()
    # collect_static()


def check_pid(pid):
    """ Check For the existence of a unix pid. """
    try:
        os.kill(pid, 0)
    except OSError:
        return False
    else:
        return True


def get_pid_file_path(service):
    return os.path.join(RUN_TMP_DIR, '{}.pid'.format(service))


def generate_log_filename(service):
    return os.path.join(CMDB_LOG_DIR, 'cmdb-{}.log'.format(service))


def get_pid(service):
    pid_file = get_pid_file_path(service)
    if os.path.isfile(pid_file):
        with open(pid_file) as f:
            try:
                return int(f.read().strip())
            except ValueError:
                return 0
    return 0


def is_running(s, unlink=True):
    pid_file = get_pid_file_path(s)

    if os.path.isfile(pid_file):
        pid = get_pid(s)
        if check_pid(pid):
            return True

        if unlink:
            os.unlink(pid_file)
    return False


def parse_service(s):
    if s == 'all':
        return all_services
    elif "," in s:
        return [i.strip() for i in s.split(',')]
    else:
        return [s]


def start_gunicorn():
    print("\n- Start Gunicorn WSGI CMDB HTTP Server {}:{}".format(HTTP_HOST,HTTP_PORT))
    service = 'gunicorn'
    bind = '{}:{}'.format(HTTP_HOST, HTTP_PORT)
    log_format = '%(h)s %(t)s "%(r)s" %(s)s %(b)s '
    pid_file = get_pid_file_path(service)
    log_file = generate_log_filename(service)
    cmd = [
        'gunicorn', 'cmdb.wsgi',
        '-b', bind,
        #'-k', 'eventlet',
        '-k', 'gthread',
        '--threads', '10',
        '-w', str(WORKERS),
        '--max-requests', '4096',
        '--access-logfile', log_file,
        '--access-logformat', log_format,
        '-p', pid_file,
    ]

    if DAEMON:
        cmd.extend([
            '--daemon',
        ])
    else:
        cmd.extend([
            '--access-logfile', '-'
        ])
    if DEBUG:
        cmd.append('--reload')
    p = subprocess.Popen(cmd, stdout=sys.stdout, stderr=sys.stderr, cwd=CMDB_APPS_DIR)
    return p

def start_celery():
    print("\n- Start Celery as Distributed Task Queue")
    os.environ.setdefault('PYTHONOPTIMIZE', '1')

    if os.getuid() == 0:
        os.environ.setdefault('C_FORCE_ROOT', '1')

    service = 'celery'

    log_file = generate_log_filename(service)
    pid_file = get_pid_file_path(service)

    cmd = [
        'celery', 'worker',
        '-A',  'crontasks',
        '-l', 'debug',
        '--pidfile', pid_file,
        '--logfile', log_file,
        '--autoscale', '20,4',
        '--beat'
    ]
    if DAEMON:
        cmd.extend([
            '--detach',
        ])
    p = subprocess.Popen(cmd, stdout=sys.stdout, stderr=sys.stderr, cwd=CMDB_APPS_DIR)
    return p
def start_service(s):
    # print(time.ctime())
    # print('cmdb version {}, more see https://cmdb.iwubida.com'.format(
    #     __version__))

    services_handler = {
         "gunicorn": start_gunicorn,
         "celery": start_celery
    }

    services_set = parse_service(s)
    processes = []
    for i in services_set:
        if is_running(i):
            show_service_status(i)
            continue
        func = services_handler.get(i)
        p = func()
        processes.append(p)

    now = int(time.time())
    for i in services_set:
        while not is_running(i):
            if int(time.time()) - now < START_TIMEOUT:
                time.sleep(1)
                continue
            else:
                print("Error: {} start error".format(i))
                stop_multi_services(services_set)
                return

    stop_event = threading.Event()

    if not DAEMON:
        signal.signal(signal.SIGTERM, lambda x, y: stop_event.set())
        while not stop_event.is_set():
            try:
                time.sleep(10)
            except KeyboardInterrupt:
                stop_event.set()
                break

        print("Stop services")
        for p in processes:
            p.terminate()

        for i in services_set:
            stop_service(i)
    else:
        print()
        show_service_status(s)


def stop_service(s, sig=15):
    services_set = parse_service(s)
    for s in services_set:
        if not is_running(s):
            show_service_status(s)
            continue
        print("Stop service: {}".format(s))
        pid = get_pid(s)
        os.kill(pid, sig)


def stop_multi_services(services):
    for s in services:
        stop_service(s, sig=9)


def stop_service_force(s):
    stop_service(s, sig=9)


def show_service_status(s):
    services_set = parse_service(s)
    for ns in services_set:
        if is_running(ns):
            pid = get_pid(ns)
            print("{} is running: {}".format(ns, pid))
        else:
            print("{} is stopped".format(ns))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description="""
        cmdb service control tools;
        Example: \r\n
        %(prog)s start all -d;
        """
    )
    parser.add_argument(
        'action', type=str,
        choices=("start", "stop", "restart", "status","init"),
        help="Action to run"
    )
    parser.add_argument(
        "service", type=str, default="all", nargs="?",
        choices=("all", "gunicorn", "celery"),
        help="The service to start",
    )
    parser.add_argument('-d', '--daemon', nargs="?", const=1)
    parser.add_argument('-w', '--worker', type=int, nargs="?", const=4)
    args = parser.parse_args()
    if args.daemon:
        DAEMON = True

    if args.worker:
        WORKERS = args.worker

    action = args.action
    srv = args.service

    if action == "start":
        start_service(srv)
    elif action == "stop":
        stop_service(srv)
    elif action == "init":
        prepare()
    elif action == "restart":
        DAEMON = True
        stop_service(srv)
        time.sleep(5)
        start_service(srv)
    else:
        show_service_status(srv)